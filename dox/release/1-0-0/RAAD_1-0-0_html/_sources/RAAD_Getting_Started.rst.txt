Getting Started with RAAD Tools
###############################

Instructions for the GUI:
==========================

The GUI has several sections at the time of writing, all of which will be covered below to help users more efficiently utilize RAAD. Remember that after running each section, the GUI will be frozen until the process finish running. To see the progress and potential warnings printed by each section, please refer to the background terminal window that pops up after the GUI executable is run. If when the GUI window launches, it does not display a sideways scrolling bar, please exit full-screen and re-enter it, so that the interface refreshes correctly and adjusts to your screen size and resolution.

Load and Probe Drive for Data Collection
-----------------------------------------

.. figure:: images/GS028.png

        Important note: To run this section successfully, you need to execute the gui.exe as admin, so that IOMeter can operate successfully

This section of the GUI helps the user utilize a workload to load the specified drive before collecting telemetry data. For convenience, an additional option for parsing the collected telemetry data is added, so that the user can obtain text files instead of binary files as the output of this section. The customizable inputs in this section are:

    #. Drive Workload Configuration: path to the input file where the workload configuration is stored
    #. SSD Number: Integer for the drive number from which to pull telemetry data
    #. SSD Name: String for name of device interface to get data from
    #. Telemetry Pull Identifier: String for the name of the data set that corresponds to the telemetry pull to be executed
    #. Output Directory: path to the output directory where the binaries from the telemetry pull will be stored
    #. Volume Label (Windows Specific): String for the label to be used on the disk volume
    #. Volume Allocation Unit (Windows Specific): String for the volume allocation unit size
    #. Volume File System (Windows Specific): String for the name of the file system to be used in the disk volume
    #. Volume Letter (Windows Specific): String for the letter to be assigned to the disk volume
    #. Partition Style (Windows Specific): String for the name of the partition style to be used in the specified disk
    #. Partition Drive (Windows Specific): Flag to indicate if the program should partition the drive using the given parameters
    #. Prep Drive (Linux Specific): Flag to indicate if the program should prep the drive before loading it
    #. Parse Binary Files: Flag to parse the telemetry binaries pulled from the drive

Data Collect or Parse
---------------------

.. figure:: images/GS029.png

This section of the GUI helps the user collect and parse binary files for telemetry. The resulting files after the parsing are text files containing all the information previously stored in the binary telemetry files. The customizable inputs in this section are:

    #. Usage Case for Intel: This dropdown menu specifies the mode to be utilized. "PARSE" is for parsing previously collected telemetry data. "CLI", "IMAS", and "TWIDL" are all for collecting telemetry data from a specified SSD device. While "CLI" is the most general method for collecting telemetry, "IMAS" is an Intel specific external tool and "TWIDL" is an Intel specific internal tool. Bear this in mind when selecting a collecting method.
    #. SSD Selection Name or Number: String specifying the name (path to the location) of the SSD device, or the number of the device on the TWIDL enabled memory list
    #. Input Directory: Only used when "PARSE" option is selected. This input field specifies the path to the directory where the previously collected binary telemetry files are located.
    #. Firmware Parsers directory: Input field specifying where the python parsing files for processing the binary files are located. This files are usually generated by Auto-Parse, so they are outside the current code repo. The code repo for Auto-parsers as well as an example telemetry binary can be found in Intel IMAS or NVMe-CLI releases
    #. Output Working Directory: Input field specifying where the resulting text files will be stored.
    #. Number of Queries: Number of telemetry pulls to be executed or parse depending on the option chosen for field 1
    #. Time Frame to collect: Only used when "PARSE" is not selected. It specifies for how long should the system collect telemetry data. It serves as a time-limit to the execution of a large number telemetry pulls.

Fault Analysis Handbook Webpage (FAH)
-------------------------------------

.. figure:: images/GS030.png

This sections of the GUI checks if the specified user has access to the Handbook to perform a crawl for information (to be utilized for failure prediction later). The customizable inputs in this section are:

    #. Username: String specifying the username to access the handbook.
    #. Password: String for the password associated with the username to access the handbook.
    #. Loaded AES-256 Password Hash Signature: Generated signature for the specified password.

Telemetry Data Table
--------------------

.. figure:: images/GS031.png

This section of the GUI generates a data table to display the information contained in the decoded configuration (.ini) file. You can display the fields for a single object or for all the objects. The customizable inputs in this section are:
    1. Decoded '.ini' File: Input to specify the path for the decoded configuration (.ini) file that contains the information to be included in the table.
    #. Choose Object to decode or choose all: Drop-down menu containing all the object UIDs. To update the list of UIDs based on the specified '.ini' file, you need to click on the "Refresh Object UIDs" button.


Telemetry Generic Object Time Series Graph
-------------------------------------------

.. figure:: images/GS032.png


This section of the GUI generates line graphs of the timeseries for different fields inside a single telemetry object. The customizable inputs in this section are:

    #. Select Configuration File:  Input to specify the path for the decoded configuration (.ini) file that contains the desired telemetry object to be graphed
    #. Browse Output Location: Input to specify the path to the directory where the resulting PDFs will be stored - if "Save Figures to PDF?" is set to Yes
    #. Object Name: String for the name of the object to be graphed
    #. Select Tracking Variables: Object's fields to be graphed on the main axis (the y-scale on the left side of the graph)
    #. Select Optional Secondary Variables: Object's fields to be graphed on the secondary axis (the y-scale on the right side of the graph)
    #. Start % of data: If set to a non-zero value, the first values of the time-series corresponding to the specified % are ignored when graphing all variables
    #. End % of data: If set to other value that is not 100, the last values of the time-series corresponding to (1- specified %) are ignored when graphing all variables
    #. Get the Matrix Profile for the Data?: Flag to indicate that the Matrix Profile of the data must be extracted before graphing it.  Please refer to https://www.cs.ucr.edu/~eamonn/MatrixProfile.html to understand what Matrix Profile is.
    #. Save Figures to PDF?: Flag to indicate whether the generated figures should be saved to PDFs or should be directly displayed to the screen for a single-use.

Telemetry Garbage (Defrag) Collection History
----------------------------------------------

.. figure:: images/GS033.png

.. figure:: images/GS034.png

Steps
    #. This section of the GUI generates all the relevant graphs for analyzing Defrag History. The customizable inputs in this section are:
    #. Drive Type: Drop down menu that allows the user to choose between two different drive types (CDR and ADP). Please select the drive from which the telemetry data values to be used were extracted.
    #. Browse Configuration File:  Input to specify the path for the decoded configuration (.ini) file that contains the desired telemetry data to be graphed. Please make sure this .ini file contains uid-41 as one of the objects.
    #. Browse Output Location: Input to specify the path to the directory where the resulting PDFs will be stored - if "Save Figures to PDF?" is set to Yes
    #. Select Set Points: Baseline reference lines used for evaluating whether HostWrites has fallen below each threshold. Each set-point represents a different threshold and associated drive state
    #. Select Tracking Variables: Variables to be graphed in the main axis. We recommend you choose HostWrites and NandWrites if you are using the set-points, as these two fields will provide the best insight.
    #. Select Optional Secondary Variables: Variables to be graphed in the secondary axis.
    #. Start % of data: If set to a non-zero value, the first values of the time-series corresponding to the specified % are ignored when graphing all variables
    #. End % of data: If set to other value that is not 100, the last values of the time-series corresponding to (1- specified %) are ignored when graphing all variables
    #. Is the Secondary Axis Bandwidth?: Flag to indicate if the secondary variables will be used to calculate Bandwidth before graphing the resulting values
    #. Select the Number of Cores: Select the number of cores in the Drive from which the telemetry data was extracted.
    #. Save Figures to PDF?: Flag to indicate whether the generated figures should be saved to PDFs or should be directly displayed to the screen for a single-use.

ARMA Prediction Plot
--------------------

.. figure:: images/GS035.png

This section of the GUI takes a single object and a single field inside that telemetry object and then uses the Auto-Regressive Moving Average (ARMA) algorithm to predict future behavior of the field's values. The customizable inputs in this section are:

    #. Browse Configuration File:  Input to specify the path for the decoded configuration (.ini) file that contains the desired telemetry data to be used for the predictions
    #. Object Name: Drop down menu listing all the objects contained in the configuration file. Choose the object that you want to use for the forecasting
    #. Select Tracking Axis Variable: Object's field to be used in the forecasting
    #. Length of Window to be Considered for Matrix Profile: Number of data values to be considered in a single window for Matrix Profile Extraction
    #. Get the Matrix Profile for the Data?: Flag to indicate that the Matrix Profile of the data must be extracted before graphing it.  Please refer to https://www.cs.ucr.edu/~eamonn/MatrixProfile.html to understand what Matrix Profile is.

RNN Prediction Plot
-------------------
.. figure:: images/GS036.png

.. figure:: images/GS037.png

This section uses RNNs models to forecast the timeseries values for different fields of a single telemetry object. The customizable inputs in this section are:

    #. Browse Configuration File:  Input to specify the path for the decoded configuration (.ini) file that contains the desired telemetry data to be used for the predictions
    #. Object Name: Drop down menu listing all the objects contained in the configuration file. Choose the object that you want to use for the forecasting
    #. Select Field Variables: Object's fields to be used as inputs into the neural network. We have limited the number of  fields to prevent users from generating bigger models that they would not be able to run locally.
    #. Select Plot Data: For simplicity, we can only display a single field at a time. Use the drop down menu to choose the field to be graphed. Remember that this field must also be part of the inputs to the neural network, or the GUI will not generate any graphs
    #. Input Width: How big should the input time-series window be for forecasting future values. Bigger values will generate bigger models that require more computational resources, but allow for more accurate forecasting and a longer forecast output (we are able to predict further in the future)
    #. Label Width: The number of time steps (data values) to be outputted by the neural network. This corresponds to the number of data values that will comprise the forecast.
    #. Shift: How many data values should be skipped when shifting the input window to generate a new set of inputs for the neural network
    #. Neurons Per Hidden Layer: How many units should be included in the LSTM and fully connected layers of the neural network
    #. Batch Size: Number of data values to be considered before triggering a weight update in the neural network
    #. Max Epochs: Number of iterations for training the neural network with the totality of the training set.
    #. Categorical Encoding of the Data?: Flag that indicates whether the input is categorical (non-numerical), and therefore needs to be turned into a numerical value to be processed by the neural network
    #. Embedded Encoding of the Data?: Flag that indicates whether the input should be encoded using complex embeddings. Usually recommended after generating a categorical encoding to uncover hidden relations between inputs
    #. Optimizer for Neural Network: name for the optimizer to be used in the model. To know more about optimizers, please refer to: https://towardsdatascience.com/overview-of-various-optimizers-in-neural-networks-17c1be2df6d5
    #. Activation for LSTM layers: name of the activation function to be used in LSTM layers. To know more about activation functions, please refer to: https://en.wikipedia.org/wiki/Activation_function
    #. Activation for Dense Layer: name of the activation function to be used in Dense layers. To know more about activation functions, please refer to: https://en.wikipedia.org/wiki/Activation_function
    #. Initializer for LSTM layer: name of the weight initializer function to be used in LSTM layers. To know more about initialization function, please refer to: https://machinelearningmastery.com/weight-initialization-for-deep-learning-neural-networks/
    #. Initializer for Dense Layer: name of the weight initializer function to be used in Dense layers. To know more about initialization function, please refer to: https://machinelearningmastery.com/weight-initialization-for-deep-learning-neural-networks/
    #. Apply Dropout Between Layers?: Flag to indicate whether dropout should be applied between layers.
    #. Get the Matrix Profile for the Data?: Flag to indicate that the Matrix Profile of the data must be extracted before graphing it.  Please refer to https://www.cs.ucr.edu/~eamonn/MatrixProfile.html to understand what Matrix Profile is.
    #. Length of Window to be Considered for Matrix Profile:  Number of data values to be considered in a single window for Matrix Profile Extraction
        - Note: The "Plot RNN Prediction" button will only generate a single graph at a time, so you might need to click it a total of 4 times to generate all graphs. Remember that you need to wait until the current graph is generated before you are able to click it again.

NLOG Predictor
--------------
.. figure:: images/GS038.png

.. figure:: images/GS039.png

This section uses RNNs models to predict future NLOG events. The customizable inputs in this section are:

    #. Browse NLOG folder: Path for the nlog Folder in which the nlog event files are contained
    #. Browse NLOG parser folder: Path for the folder in which the NLogFormats.py script is contained
    #. Number of Components: Integer for the number of dimensions to be used in the NLOG description embeddings
    #. Max Number of Parameters: Integer for the maximum number of parameters that can be contained in an NLOG description for the specified formats file
    #. Input Size: Integer for the number of NLOG events to be considered as the input for the predictive models
    #. Max Output Size: Integer for the maximum number of NLOG events to be predicted with the models
    #. Model Type for Width Predictor: name of the model type to be used in the linear regression model for determining the number of NLOG events to be predicted. Must be selected from the following: ['elastic', 'lasso', 'ridge', 'default']
    #. Neurons Per Hidden Layer for Time Predictor: Integer for the number of neurons contained in each hidden layer for the NLOG time stamp predictor model
    #. Neurons Per Hidden Layer for Event Predictor: Integer for the number of neurons contained in each hidden layer for the NLOG event predictor model
    #. Neurons Per Hidden Layer for Parameter Predictor: Integer for the number of neurons contained in each hidden layer for the NLOG parameter predictor model
    #. Max Epochs for Time Predictor: Integer for the maximum number of epochs to be considered when training the NLOG time stamp predictor model
    #. Max Epochs for Event Predictor: Integer for the maximum number of epochs to be considered when training the NLOG event predictor model
    #. Max Epochs for Parameter Predictor: Integer for the maximum number of epochs to be considered when training the NLOG parameter predictor model
    #. Optimizer for Time Predictor: name of the optimizer to be used in the NLOG time stamp predictor model. Must be selected from the following: ['SGD', 'RMSprop', 'Adagrad', 'Adadelta', 'Adam', 'Adamax']
    #. Optimizer for Event Predictor: name of the optimizer to be used in the NLOG event predictor model. Must be selected from the following: ['SGD', 'RMSprop', 'Adagrad', 'Adadelta', 'Adam', 'Adamax']
    #. Optimizer for Parameter Predictor: name of the optimizer to be used in the NLOG parameter predictor model. Must be selected from the following: ['SGD', 'RMSprop', 'Adagrad', 'Adadelta', 'Adam', 'Adamax']
    #. Activation for LSTM Layers in Time Predictor: name of the activation function to be used in the LSTM layers of the NLOG time stamp predictor model. Must be selected from the following: ['relu', 'sigmoid', 'softmax', 'softplus', 'softsign', 'tanh', 'selu', 'elu', 'exponential']
    #. Activation for LSTM Layers in Event Predictor: name of the activation function to be used in the LSTM layers of the NLOG event predictor model. Must be selected from the following: ['relu', 'sigmoid', 'softmax', 'softplus', 'softsign', 'tanh', 'selu', 'elu', 'exponential']
    #. Activation for LSTM Layers in Parameter Predictor: name of the activation function to be used in the LSTM layers of the NLOG parameter predictor model. Must be selected from the following: ['relu', 'sigmoid', 'softmax', 'softplus', 'softsign', 'tanh', 'selu', 'elu', 'exponential']
    #. Initializer for LSTM Layers in Time Predictor: name of the weight initializer function to be used in the LSTM layers of the NLOG time stamp predictor model. Must be selected from the following: ['random_normal', 'random_uniform', 'truncated_normal', 'zeros', 'ones', 'glorot_normal', 'glorot_uniform', 'identity', 'orthogonal', 'constant', 'variance_scaling']
    #. Initializer for LSTM Layers in Event Predictor: name of the weight initializer function to be used in the LSTM layers of the NLOG event predictor model. Must be selected from the following: ['random_normal', 'random_uniform', 'truncated_normal', 'zeros', 'ones', 'glorot_normal', 'glorot_uniform', 'identity', 'orthogonal', 'constant', 'variance_scaling']
    #. Initializer for LSTM Layers in Parameter Predictor: name of the weight initializer function to be used in the LSTM layers of the NLOG parameter predictor model. Must be selected from the following: ['random_normal', 'random_uniform', 'truncated_normal', 'zeros', 'ones', 'glorot_normal', 'glorot_uniform', 'identity', 'orthogonal', 'constant', 'variance_scaling']
    #. Apply Dropout Between Layers in Time Predictor?: Boolean flag that indicates if dropout in between layers should be applied to the NLOG time stamp predictor model
    #. Apply Dropout Between Layers in Event Predictor?: Boolean flag that indicates if dropout in between layers should be applied to the NLOG event predictor model
    #. Apply Dropout Between Layers in Parameter Predictor?: Boolean flag that indicates if dropout in between layers should be applied to the NLOG parameter predictor model

User Report
-----------
.. figure:: images/GS040.png

This section will print the string representation of the User Report to be used for the first case in our Path Finding. Just hit Refresh Report to generate the report with the previously loaded data in section 1.

    - Important Note: before you run this section, please download and install the MikTex distribution for Windows, so your system can correctly parse the output into a PDF. The MikTex distribution can be found here: https://miktex.org/download. After the download finishes, please install the MikTex distribution using the wizard (please make sure you choose the option to install it for all users in the computer, so that the script runs successfully). Also download the necessary packages as suggested in the installation wizard. If the MikTex distribution is unable to download the packages (known bug), please utilize an online compiler like Overleaf: https://www.overleaf.com/ to compile the resulting .tex file.

Database Upload
--------------------
.. figure:: images/GS041.png

This section will upload the zip file of the binary telemetry pulls to the Database. The customizable inputs in this section are:

    - Please enter your upload Destination and the File to Upload: Drop down menu to specify the Axon location where the zip file should be uploaded
    - Content File: Path to the zip file containing all the binary files to be stored


AXON Database Download
----------------------
.. figure:: images/GS042.png

This section will download a zip file from the Axon Database containing the binary telemetry pulls. The customizable inputs in this section are:

    #. Choose Download Directory: Path to the directory where the downloaded zip file will be stored locally
    #. Axon IDs: Available objects to be downloaded. This are based on the User Profile specified in the next section


User Profile Information
------------------------
.. figure:: images/GS043.png

This section allows the user to update their profile information by specifying a few parameters. The customizable inputs in this section are:

    #. Enter Identity Number: Numerical value that identifies each user of RAAD
    #. Enter Username: Username used for RAAD, the handbook connection, and Axon
    #. Enter Mode: Mode of operation through which the user is accessing RAAD services
    #. Key Encrypt-Decrypt Location: Path to the encryption key if one is available
    #. Enable Encryption: Flag for encrypting communications and locally stored data
    #. Enter Working Directory: Root directory from which the GUI is being run

Application Information
-----------------------

.. figure:: images/GS044.png

This section allows the user to update the application information by specifying different parameters. The customizable inputs in this section are:
    #. Enter Identity Number: Numerical value that identifies each user of RAAD
    #. Enter Major Version Number: New major version number to be assigned to the application
    #. Enter Minor Version Number: New minor version number to be assigned to the application
    #. Enter Name: Name of the developer that wants to request the changes
    #. Execution Location: Path to the directory in which the root folder for StorageRelationalAnalysis is located
    #. Enter Mode: Mode of operation through which the user is accessing RAAD services
    #. Enter URL: URL for the web GUI
